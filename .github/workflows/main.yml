name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  commitlint:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          extraPullNames: nix-community

      - name: get base commit
        id: get_base
        run: echo "::set-output name=commit::$(git rev-list '${{ github.event.pull_request.base.sha }}..${{ github.sha }}' | tail -n1)"

      - name: lint commits
        run: nix-shell -A commitlint --pure --run 'commitlint --from=${{ steps.get_base.outputs.commit }} --to=${{ github.sha }}' --keep-going
  lint:
    runs-on: ubuntu-latest
    needs:
      - commitlint
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: pre-commit checks
        run: nix-shell --pure -A python39 --run 'pre-commit run --all-files' --keep-going
  nix:
    runs-on: ${{ matrix.os }}
    needs:
      - commitlint
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: nix build and test
        run: nix-build --argstr python python${{ matrix.python-version }} --keep-going

  gen_conda_env_file:
    runs-on: ubuntu-latest
    needs:
      - commitlint
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install python
        uses: actions/setup-python@v2

      - name: install poetry2conda
        run: pip install poetry2conda

      - name: generate conda env file
        run: |
          set -euo pipefail

          poetry2conda --dev --extras all pyproject.toml - | tee environment.yaml

      - name: upload conda env file
        uses: actions/upload-artifact@v2
        with:
          name: conda-env-file
          path: environment.yaml
          if-no-files-found: error

      - name: cleanup generated env files
        run: rm environment.yaml

  test_no_backends:
    runs-on: ${{ matrix.os }}
    needs:
      - gen_conda_env_file
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download env file
        uses: actions/download-artifact@v2
        with:
          name: conda-env-file
          path: tmp

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: tmp/environment.yaml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: run tests
        run: |
          pytest \
            ibis/tests \
            --numprocesses 2 \
            --quiet \
            -ra \
            --junitxml=junit.xml \
            --cov=ibis \
            --cov-report=xml:coverage.xml | tee pytest.log

      - name: pytest errors
        run: ./ci/pytest_errors.sh
        if: failure()

  test_backends:
    runs-on: ${{ matrix.os }}
    needs:
      - gen_conda_env_file
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        python-version:
          - "3.7"
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download env file
        uses: actions/download-artifact@v2
        with:
          name: conda-env-file
          path: tmp

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: tmp/environment.yaml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["csv", "dask", "hdf5", "pandas", "parquet", "sqlite"]'

      - name: install backend data
        run: |
          for backend in ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}; do
            python ci/datamgr.py "$backend"
          done

      - name: run tests
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}
        run: |
          pytest \
            ibis/backends/{${{ join(fromJSON(steps.set_backends.outputs.backends), ',') }}} \
            ibis/backends/tests \
            -m "${{ join(fromJSON(steps.set_backends.outputs.backends), ' or ') }}" \
            --numprocesses 2 \
            --quiet \
            -ra \
            --junitxml=junit.xml \
            --cov=ibis \
            --cov-report=xml:coverage.xml | tee pytest.log

      - name: pytest errors
        run: ./ci/pytest_errors.sh
        if: failure()

  test_linux_only_backends:
    runs-on: ubuntu-latest
    needs:
      - gen_conda_env_file
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ""
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      mysql:
        image: mariadb:10.4.12
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: ibis_testing
          MYSQL_USER: ibis
          MYSQL_PASSWORD: ibis
        options: --health-cmd="mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 3
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download env file
        uses: actions/download-artifact@v2
        with:
          name: conda-env-file
          path: tmp

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: tmp/environment.yaml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["mysql", "postgres", "pyspark"]'

      - name: install backend data
        run: |
          for backend in ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}; do
            python ci/datamgr.py "$backend"
          done

      - name: run tests
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}
        run: |
          pytest \
            --numprocesses 2 \
            ibis/backends/{${{ join(fromJSON(steps.set_backends.outputs.backends), ',') }}} \
            ibis/backends/tests \
            --durations=25 \
            -m "(postgres and not udf) or mysql or pyspark" \
            --quiet \
            -ra \
            --junitxml=junit.xml \
            --cov=ibis \
            --cov-report=xml:coverage.xml | tee pytest.log

      - name: pytest errors
        run: ./ci/pytest_errors.sh
        if: failure()

  test_impala_clickhouse:
    runs-on: ubuntu-latest
    needs:
      - gen_conda_env_file
    defaults:
      run:
        shell: bash -l {0}
    env:
      IBIS_TEST_NN_HOST: localhost
      IBIS_TEST_IMPALA_HOST: localhost
      IBIS_TEST_IMPALA_PORT: 21050
      IBIS_TEST_WEBHDFS_PORT: 50070
      IBIS_TEST_WEBHDFS_USER: hdfs
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.9"
    services:
      postgres:
        image: shajekpivotal/ibis-docker-postgres-9.5
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: ""
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3
      kudu-master:
        image: ibisproject/kudu:latest
        ports:
          - 7051:7051
          - 8051:8051
        env:
          KUDU_MASTER: "true"
        options: "--network-alias=kudu --cap-add=SYS_TIME"
      kudu-tserver:
        image: ibisproject/kudu:latest
        ports:
          - 7050:7050
          - 8050:8050
        env:
          KUDU_MASTER: "false"
        options: "--cap-add=SYS_TIME"
      impala:
        image: ibisproject/impala:latest
        env:
          PGPASSWORD: postgres
        ports:
          # HDFS
          - 9020:9020
          - 50070:50070
          - 50075:50075
          - 8020:8020
          - 8042:8042
          # Hive
          - 9083:9083

          # Impala
          - 21000:21000
          - 21050:21050
          - 25000:25000
          - 25010:25010
          - 25020:25020
        options: --hostname localhost --health-cmd "nc -z 127.0.0.1 21050 && nc -z 127.0.0.1 50070" --health-interval 30s --health-timeout 10s --health-retries 20
      clickhouse:
        # XXX does clickhouse backend require the impala container too?
        image: yandex/clickhouse-server:18.14
        ports:
          - 8123:8123
          - 9000:9000

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download env file
        uses: actions/download-artifact@v2
        with:
          name: conda-env-file
          path: tmp

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: tmp/environment.yaml
          condarc-file: ci/condarc

      - name: install boost
        run: mamba install -n ibis boost

      - name: install ibis
        run: pip install .

      - name: download backend data
        run: python ci/datamgr.py download

      - name: set backends
        id: set_backends
        run: echo '::set-output name=backends::["impala", "clickhouse"]'

      - name: install backend data
        run: |
          python ci/impalamgr.py load --data
          python ci/datamgr.py clickhouse

      - name: run tests
        env:
          PYTEST_BACKENDS: ${{ join(fromJSON(steps.set_backends.outputs.backends), ' ') }}
        run: |
          pytest \
            ibis/backends/{${{ join(fromJSON(steps.set_backends.outputs.backends), ',') }}} \
            ibis/backends/tests \
            -m "${{ join(fromJSON(steps.set_backends.outputs.backends), ' or ') }}" \
            --numprocesses 2 \
            --quiet \
            -ra \
            --junitxml=junit.xml \
            --cov=ibis \
            --cov-report=xml:coverage.xml | tee pytest.log

      - name: pytest errors
        run: ./ci/pytest_errors.sh
        if: failure()

  benchmarks:
    runs-on: ubuntu-latest
    needs:
      - gen_conda_env_file
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: download env file
        uses: actions/download-artifact@v2
        with:
          name: conda-env-file
          path: tmp

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}
          environment-file: tmp/environment.yaml
          condarc-file: ci/condarc

      - name: install ibis
        run: pip install .

      - name: benchmark
        run: |
          asv machine --yes
          asv dev

  docs:
    runs-on: ubuntu-latest
    needs:
      - commitlint
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - name: build web
        run: nix-shell -A python39 --pure --run 'python -m pysuerga docs/web --target-path=/tmp/ibis-project.org/' --keep-going

      - name: build docs
        run: nix-shell -A python39 --pure --run 'sphinx-build -b html docs/source /tmp/ibis-project.org/docs -W -T' --keep-going

      - name: Add config to docs
        run: |
          cd /tmp/ibis-project.org
          touch .nojekyll
          echo "ibis-project.org" > CNAME

      - name: Push docs
        if: ${{ github.event_name == 'push' }}
        uses: cpina/github-action-push-to-another-repository@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.IBIS_PROJECT_DOCS_PAT }}
        with:
          source-directory: /tmp/ibis-project.org
          destination-github-username: ibis-project
          destination-repository-name: ibis-project.org
          user-name: github-actions
          user-email: github-actions@github.com

  conda_package:
    # TODO: fully automate the conda-forge PR submission on release
    runs-on: ubuntu-latest
    needs:
      - commitlint
    strategy:
      matrix:
        python-version:
          - "3.9"
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
          extraPullNames: nix-community

      - uses: conda-incubator/setup-miniconda@v2
        with:
          mamba-version: "*"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          channel-priority: strict
          activate-environment: ibis
          python-version: ${{ matrix.python-version }}

      - name: generate conda recipe from poetry
        run: |
          set -euo pipefail

          mkdir -p /tmp/recipe

          ./dev/poetry2recipe | tee /tmp/recipe/meta.yaml

      - name: install conda build and boa
        run: mamba install conda-build boa

      - name: build recipe
        run: conda mambabuild -c conda-forge --python "${{ matrix.python-version }}" /tmp/recipe

  release:
    needs:
      - benchmarks
      - commitlint
      - conda_package
      - docs
      - lint
      - nix
      - test_backends
      - test_impala_clickhouse
      - test_linux_only_backends
      - test_no_backends
    runs-on: ubuntu-latest
    concurrency: release
    outputs:
      commit: ${{ steps.get_commit.outputs.commit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' }}
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout PR
        uses: actions/checkout@v2
        if: ${{ github.event_name != 'push' }}
        with:
          fetch-depth: 0

      - name: Configure git for semantic release
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          extraPullNames: nix-community

      - name: generate setup.py
        run: ./dev/poetry2setup -o setup.py

      - uses: EndBug/add-and-commit@v7
        with:
          add: setup.py
          author_name: github-actions
          author_email: github-actions@github.com
          message: "chore(build): generate setup.py [skip ci]"
          push: ${{ github.event_name == 'push' }}

      - name: get commit hash of generatedd setup.py
        id: get_commit_after_setup_gen
        run: echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: checkout committed generated setup.py
        uses: actions/checkout@v2
        if: ${{ github.event_name == 'push' }}
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.get_commit_after_setup_gen.outputs.commit }}

      - name: Setup Python
        uses: actions/setup-python@v2

      - name: Install poetry and semantic-release
        run: pip install poetry python-semantic-release

      - name: Semantic release
        if: ${{ github.event_name == 'push' }}
        run: semantic-release publish --verbosity=DEBUG
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Semantic release
        if: ${{ github.event_name != 'push' }}
        run: semantic-release publish --noop --verbosity=DEBUG

      - name: get release commit hash
        id: get_commit
        run: echo "::set-output name=commit::$(git rev-parse HEAD)"

  upload_conda_artifacts:
    needs:
      - gen_conda_env_file
      - release
    runs-on: ubuntu-latest
    concurrency: upload_conda_artifacts
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.release.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: get url of source artifact
        id: get_url
        run: echo "::set-output name=url::https://github.com/ibis-project/ibis/archive/${{ needs.release.outputs.commit }}.tar.gz"

      - name: get sha256 of source artifact
        id: get_sha
        run: |
          set -euo pipefail

          echo "::set-output name=sha256::$(curl -LsS ${{ steps.get_url.outputs.url }} | sha256sum | cut -d ' ' -f1)"

      - name: install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-unstable-small

      - name: setup cachix
        uses: cachix/cachix-action@v10
        with:
          name: ibis
          extraPullNames: nix-community

      - name: generate conda recipe
        run: |
          set -euxo pipefail

          ls
          ls dev
          ./dev/poetry2recipe --url "${{ steps.get_url.outputs.url }}" --sha256 "${{ steps.get_sha.outputs.sha256 }}" | tee recipe.yaml

      - name: upload conda recipe to github actions
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'push' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: recipe.yaml
          tag: ${{ github.ref }}
          overwrite: true

      - name: download env file
        uses: actions/download-artifact@v2
        with:
          name: conda-env-file
          path: tmp

      - name: upload conda environment to github actions
        uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'push' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: tmp/environment.yaml
          asset_name: environment.yaml
          tag: ${{ github.ref }}
          overwrite: true
