[tool.poetry]
name = "ibis-framework"
version = "1.4.0"
packages = [{ include = "ibis" }]
homepage = "https://ibis-project.org"
repository = "https://github.com/ibis-project/ibis"
documentation = "https://ibis-project.org/docs"
description = "Productivity-centric Python Big Data Framework"
authors = ["Ibis Contributors"]
maintainers = ["Ibis Contributors"]
license = "Apache-2.0"
readme = "README.md"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering",
]

[tool.poetry.dependencies]
python = ">=3.7.1,<4"
cached_property = "^1"
multipledispatch = "^0.6"
numpy = "^1"
pandas = "^1"
pytz = "2021.1"
regex = "2021.7.6"
cytoolz = "^0.11"
toolz = "^0.11"
clickhouse-driver = { version = "^0.1", optional = true }
clickhouse-sqlalchemy = { version = "^0.1", optional = true }
dask = { version = ">2021.6.0", optional = true, extras = [
  "dataframe",
  "array"
] }
geoalchemy2 = { version = "^0.9", optional = true }
geopandas = { version = "^0.9", optional = true }
graphviz = { version = "^0.16", optional = true }
hdfs = { version = "^2", optional = true }
impyla = { version = "0.18a1", optional = true, extras = ["kerberos"] }
psycopg2 = { version = "^2", optional = true }
pyarrow = { version = "^5", optional = true }
pymysql = { version = "^1", optional = true }
pyspark = { version = "^3", optional = true }
requests = { version = "^2", optional = true }
requests-kerberos = { version = "^0.12", optional = true }
shapely = { version = "^1", optional = true }
sqlalchemy = { version = "~1.3", optional = true }
tables = { version = "^3", optional = true }
flatbuffers = "^2"

[tool.poetry.dev-dependencies]
Sphinx = "^4"
asv = "^0.4"
black = "19.10b0"
click = "^7"
flake8 = "^3"
ipykernel = "^6.3.0"
ipython = "^7"
isort = "^5"
mypy = "0.812"
nbsphinx = "^0.8"
pandas = "^1"
plumbum = "^1"
pydocstyle = "^6"
pysuerga = "^0.1"
pytest = "^6"
pytest-cov = "^2.12.1"
pytest-mock = "^3"
pytest-xdist = "^2"
releases = "^1"
sphinx-rtd-theme = "^0.5"
sqlalchemy = "~1.3"
toolz = "^0.11"

[tool.poetry2conda]
name = "ibis"

[tool.poetry2conda.dependencies]
graphviz = { name = "python-graphviz" }
impyla = { channel = "pip" }
sphinx-rtd-theme = { channel = "pip" }
# this doesn't exist on conda-forge, and when installing using the defaults
# channel causes solving to fail
geoalchemy2 = { channel = "pip" }
tables = { name = "pytables" }
hdfs = { name = "python-hdfs" }
pysuerga = { channel = "pip" }
releases = { channel = "pip" }

[tool.poetry.extras]
all = [
  "clickhouse-driver",
  "clickhouse-sqlalchemy",
  "dask",
  "geoalchemy2",
  "geopandas",
  "graphviz",
  "hdfs",
  "impyla",
  "psycopg2",
  "pyarrow",
  "pymysql",
  "pyspark",
  "requests",
  "requests-kerberos",
  "shapely",
  "sqlalchemy",
  "tables"
]
clickhouse = ["sqlalchemy", "clickhouse-sqlalchemy", "clickhouse-driver"]
dask = ["dask", "pyarrow"]
geospatial = ["geoalchemy2", "geopandas", "shapely"]
hdf5 = ["tables"]
impala = ["hdfs", "sqlalchemy", "requests", "impyla"]
kerberos = ["requests-kerberos"]
mysql = ["sqlalchemy", "pymysql"]
parquet = ["pyarrow"]
postgres = ["sqlalchemy", "psycopg2"]
pyspark = ["pyspark", "pyarrow"]
sqlite = ["sqlalchemy"]
visualization = ["graphviz"]

[tool.poetry.plugins."ibis.backends"]
clickhouse = "ibis.backends.clickhouse"
csv = "ibis.backends.csv"
dask = "ibis.backends.dask"
hdf5 = "ibis.backends.hdf5"
impala = "ibis.backends.impala"
mysql = "ibis.backends.mysql"
pandas = "ibis.backends.pandas"
parquet = "ibis.backends.parquet"
postgres = "ibis.backends.postgres"
pyspark = "ibis.backends.pyspark"
spark = "ibis.backends.pyspark"
sqlite = "ibis.backends.sqlite"

[tool.semantic_release]
version_toml = "pyproject.toml:tool.poetry.version"
version_variable = [
  "ibis/__init__.py:__version__",
  "docs/source/conf.py:version"
]
branch = "master"
upload_to_pypi = false
upload_to_release = false
build_command = "poetry build"
commit_subject = "chore(release): {version}"
commit_author = "github-actions <github-actions@github.com>"
changelog_file = "docs/web/release_notes.md"

[tool.pytest.ini_options]
xfail_strict = true
addopts = [
  "--ignore=site-packages",
  "--ignore=dist-packages",
  "--strict-markers"
]
norecursedirs = ["site-packages", "dist-packages"]
markers = [
  "backend",
  "clickhouse",
  "csv",
  "dask",
  "geo",
  "hdfs",
  "hdf5",
  "impala",
  "kudu",
  "min_spark_version",
  "mysql",
  "only_on_backends",
  "pandas",
  "parquet",
  "postgis",
  "postgres",
  "postgres_extensions",
  "pyspark",
  "skip_backends",
  "skip_missing_feature",
  "spark",
  "sqlite",
  "superuser",
  "udf",
  "xfail_backends",
  "xfail_unsupported",
  "xpass_backends"
]

[tool.black]
line_length = 79
skip_string_normalization = true

[tool.isort]
known_third_party = [
  "cached_property",
  "click",
  "clickhouse_driver",
  "dateutil",
  "google",
  "graphviz",
  "impala",
  "kudu",
  "mock",
  "multipledispatch",
  "numpy",
  "pandas",
  "pkg_resources",
  "plumbum",
  "psycopg2",
  "pyarrow",
  "pydata_google_auth",
  "pygit2",
  "pymapd",
  "pymysql",
  "pyspark",
  "pytest",
  "pytz",
  "regex",
  "requests",
  "setuptools",
  "sphinx_rtd_theme",
  "sqlalchemy",
  "thrift",
  "toolz"
]
ensure_newline_before_comments = true
line_length = 79
multi_line_output = 3
include_trailing_comma = true
profile = "black"

[tool.pydocstyle]
inherit = false
convention = "numpy"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105"]
match_dir = "(ibis|omniscidb)"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.ibis]
supported_python_versions = ["3.7", "3.8", "3.9"]
